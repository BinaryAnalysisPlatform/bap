open Core_kernel.Std

let (/) = Filename.concat
let name = "$pkg_name"
let version = "$pkg_version"
let os_type = "$os_type"
let system = "$system"
let architecture = "$architecture"
let ocaml_version = "$ocaml_version"
let prefix = "$prefix"
let exec_prefix = "$exec_prefix"
let bindir = "$bindir"
let sbindir = "$sbindir"
let libexecdir = "$libexecdir"
let confdir = "$sysconfdir" / name
let sharedstatedir = "$sharedstatedir"
let localstatedir = "$localstatedir"
let libdir = "$libdir" / name
let datarootdir = "$datarootdir"
let datadir = "$datadir" / name
let infodir = "$infodir"
let localedir = "$localedir"
let mandir = "$mandir"
let docdir = "$docdir"
let htmldir = "$htmldir"
let dvidir = "$dvidir"
let pdfdir = "$pdfdir"
let psdir = "$psdir"
let suffix_program = "$suffix_program"
let debug = "$debug"
let profile = "$profile"
let standard_library = "$standard_library"

exception Duplicate_key of string
exception Improper_format of string
exception Directory_probably_not_exists of string

let string_splitter str =
  match String.split str ~on:'=' with
  | [a; b] -> (a, b)
  | _ -> raise (Improper_format str)

let options () =
  let filename = confdir / "temporary.conf" in
  let split_filter = List.map ~f:string_splitter in
  try
    In_channel.with_file filename ~f:(fun ch -> In_channel.input_lines ch
                                                |> split_filter)
  with Sys_error _ -> []

let option_map_exn () =
  match options () |> Map.of_alist String.comparator with
  | `Duplicate_key k -> raise (Duplicate_key k)
  | `Ok m -> m

let get name =
  let search_for = option_map_exn () |> Map.find in
  search_for name

let set ~name ~data =
  let filename = confdir / "temporary.conf" in
  let conf_lines = option_map_exn () |>
                   Map.add ~key:name ~data |>
                   Map.to_alist |>
                   List.map ~f:(fun (k, v) -> k ^ "=" ^ v) in
  try
    Out_channel.write_lines filename conf_lines
  with Sys_error _ -> raise (Directory_probably_not_exists confdir)

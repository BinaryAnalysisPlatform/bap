let default_llvm_components = [
  "all-targets";
  "binaryformat";
  "core";
  "mc";
  "debuginfodwarf";
  "debuginfomsf";
  "debuginfopdb";
]


let llvm_components () : unit =
  BaseEnv.var_define
    ~hide:false
    ~dump:true
    ~cli:BaseEnv.CLIWith
    ~short_desc:(fun () ->
        "the comma-separated list of required LLVM components")
    ("llvm_components")
    (fun () -> String.concat "," default_llvm_components) |>
  definition_end

let strip_patch ver =
  match String.index_opt ver '.' with
  | Some n -> String.sub ver 0 (n + 2)
  | None -> ver

let extract config link_static v =
  let link_mode = if link_static then "--link-static" else "" in
  let components = if v = "libs"
    then String.split_on_char ',' @@ BaseEnv.var_get "llvm_components"
    else [] in
  OASISExec.run_read_one_line ~ctxt config @@
  link_mode :: ("--"^v) :: components

let extract_ldflags config link_static =
  extract config link_static "ldflags" ^ " " ^
  extract config link_static "system-libs"

let llvm var () : unit =
  BaseEnv.var_define
    ~hide:true
    ~dump:true
    ~short_desc:(fun () -> "llvm-config --"^var)
    ("llvm_"^var)
    (fun () ->
       let config = BaseEnv.var_get "llvm_config" in
       let link_static = BaseEnv.var_get "llvm_static" = "true" in
       if var = "ldflags"
       then extract_ldflags config link_static
       else extract config link_static var) |>
  definition_end

let llvm_version () : unit =
  BaseEnv.var_define
    ~hide:false
    ~dump:true
    ~cli:BaseEnv.CLIWith
    ~short_desc:(fun () -> "llvm version (e.g., 10)")
    "llvm_version"
    (fun () ->
       try
         ignore @@ OASISFileUtil.which ~ctxt "llvm-config";
         OASISExec.run_read_one_line ~ctxt "llvm-config" ["--version"]
       with Not_found -> "10") |>
  definition_end

let llvm_config () : unit =
  BaseEnv.var_define
    ~hide:false
    ~dump:true
    ~cli:BaseEnv.CLIWith
    ~short_desc:(fun () -> "llvm-config executable")
    "llvm_config"
    (fun () ->
       (* default macports if we're on mac os x *)
       let macosx = BaseEnv.var_get "system" = "macosx" in
       let vers = match BaseEnv.var_get "llvm_version" with
         | "" -> []
         | ver when macosx -> ["-mp-" ^ strip_patch ver; "-" ^ strip_patch ver]
         | ver -> ["-" ^ ver; "-" ^ strip_patch ver] in
       find_map vers ~f:(fun ver ->
           try Some (OASISFileUtil.which ~ctxt ("llvm-config" ^ ver))
           with Not_found -> None) |> function
       | Some path -> path
       | None -> raise Not_found) |>
  definition_end

let llvm_mainlib () : unit =
  BaseEnv.var_define
    ~hide:true
    ~dump:true
    ~short_desc:(fun () -> "main LLVM library")
    "llvm_mainlib"
    (fun () -> "-lLLVM-"^BaseEnv.var_get "llvm_version") |>
  definition_end


let llvm_lib () : unit =
  BaseEnv.var_define
    ~hide:true
    ~dump:true
    ~short_desc:(fun () -> "LLVM library(ies) to link with")
    "llvm_lib"
    (fun () ->
       let llvm_static = BaseEnv.var_get "llvm_static" in
       let lib = if llvm_static = "true"
         then "llvm_libs"
         else "llvm_mainlib" in
       BaseEnv.var_get lib) |>
  definition_end

let () =
  define [
    llvm_components;
    llvm_version;
    llvm_config;
    llvm_mainlib;
    llvm "cxxflags";
    llvm "ldflags";
    llvm "cflags";
    llvm "libs";
    llvm_lib
  ]

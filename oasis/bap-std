Flag bap_std
  Description: Build BAP Standard Library
  Default: false

PostInstallCommand: ./postinstall.native

Library bap
  Path:            lib/bap
  Build$:          flag(everything) || flag(bap_std)
  FindLibName:     bap
  CompiledObject:  best
  BuildDepends:    bap.disasm,
                   bap.image,
                   bap.plugins,
                   bap.sema,
                   bap.types,
                   bap-future,
                   cmdliner,
                   regular
  Modules:         Bap
  InternalModules: Bap_event, Bap_log, Bap_project, Bap_self, Bap_synthetic_symbolizer


Library types
  Path:            lib/bap_types
  Build$:          flag(everything) || flag(bap_std)
  FindlibParent:   bap
  FindlibName:     types
  CompiledObject:  best
  BuildDepends:    monads, zarith, uuidm, bap.config, regular, graphlib, ogre,
                   ppx_variants_conv, ppx_enumerate

  InternalModules:
                   Bap_addr,
                   Bap_arch,
                   Bap_attributes,
                   Bap_bil,
                   Bap_bili,
                   Bap_bili_types,
                   Bap_bil_adt,
                   Bap_biri,
                   Bap_biri_types,
                   Bap_bitvector,
                   Bap_common,
                   Bap_context,
                   Bap_eval,
                   Bap_eval_types,
                   Bap_exp,
                   Bap_expi,
                   Bap_expi_types,
                   Bap_ir,
                   Bap_ir_graph,
                   Bap_ir_callgraph,
                   Bap_tid_graph,
                   Bap_helpers,
                   Bap_int_conversions,
                   Bap_integer,
                   Bap_integer_intf,
                   Bap_monad,
                   Bap_monad_types,
                   Bap_ogre,
                   Bap_result,
                   Bap_size,
                   Bap_state,
                   Bap_stmt,
                   Bap_trie,
                   Bap_trie_intf,
                   Bap_type,
                   Bap_types,
                   Bap_type_error,
                   Bap_value,
                   Bap_var,
                   Bap_vector,
                   Bap_visitor


Library bap_image
  Path:          lib/bap_image/
  Build$:          flag(everything) || flag(bap_std)
  FindlibParent: bap
  FindlibName:   image
  BuildDepends:  bap.types, ogre
  InternalModules:
                 Bap_fileutils,
                 Bap_image,
                 Bap_image_std,
                 Bap_memmap,
                 Bap_memory,
                 Bap_table,
                 Image_backend,
                 Image_common,
                 Image_internal_std

Library disasm
  Path:          lib/bap_disasm
  Build$:          flag(everything) || flag(bap_std)
  FindlibParent: bap
  FindlibName:   disasm
  BuildDepends:  bap.image,
                 bap.types,
                 bap-future,
                 camlzip,
                 ocamlgraph,
                 ogre,
                 ppx_here
  InternalModules:
                 Bap_disasm,
                 Bap_disasm_basic,
                 Bap_disasm_block,
                 Bap_disasm_brancher,
                 Bap_disasm_insn,
                 Bap_disasm_linear_sweep,
                 Bap_disasm_prim,
                 Bap_disasm_rec,
                 Bap_disasm_reconstructor,
                 Bap_disasm_rooter,
                 Bap_disasm_source,
                 Bap_disasm_source_factory,
                 Bap_disasm_source_intf,
                 Bap_disasm_std,
                 Bap_disasm_symbolizer,
                 Bap_disasm_symtab,
                 Bap_disasm_target_factory,
                 Bap_disasm_target_intf,
                 Bap_disasm_types,
                 Bap_insn_kind
  CCOpt:         $cc_optimization
  CCLib:         $cxxlibs
  CSources:      disasm.h, disasm.c, disasm_stubs.c

Library sema
  Build$:          flag(everything) || flag(bap_std)
  Path:          lib/bap_sema
  FindlibParent: bap
  FindlibName:   sema
  BuildDepends:  bap.disasm,
                 bap.types
  InternalModules:
                 Bap_sema,
                 Bap_sema_lift,
                 Bap_sema_ssa,
                 Bap_sema_taint,
                 Bap_sema_free_vars

Library plugins
  Build$:          flag(everything) || flag(bap_std)
  Path:            lib/bap_plugins
  FindLibParent:   bap
  FindLibName:     plugins
  Modules:         Bap_plugins
  BuildDepends:    core_kernel, dynlink, fileutils, findlib, bap.bundle, bap.config, bap-future

Library "bap-build"
  Build$:          flag(everything) || flag(bap_std)
  Path: lib/bap_build
  FindlibName: bap-build # will rename later
  #FindlibParent: bap
  CompiledObject: best
  Modules: Bap_build
  BuildDepends: findlib, ocamlbuild, bap.config


Library top
  XMETADescription: Toplevel printers for bap-types and core_kernel
  Build$:          flag(everything) || flag(bap_std)
  Path: lib/bap
  FindLibParent: bap
  FindLibName: top
  Modules : Core_printers
  InternalModules:
            Bap_install_printers,
            Bap_load_plugins
  BuildDepends: compiler-libs,
                compiler-libs.common,
                bap,
                bap.plugins,
                bap.config

Library config
  Build$:          flag(everything) || flag(bap_std)
  Path:            lib/bap_config
  FindlibParent:   bap
  FindlibName:     config
  Modules:         Bap_config


Library bundle
  Build$:          flag(everything) || flag(bap_std)
  Path:          lib/bap_bundle
  FindlibParent: bap
  FindlibName:   bundle
  BuildDepends:  uri, camlzip, unix, bap.config
  Modules:       Bap_bundle


Executable "bapbuild"
  Build$:         flag(everything) || flag(bap_std)
  Path:           tools
  MainIs:         bapbuild.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   core_kernel, ocamlbuild, bap-build, compiler-libs

Executable "bapbundle"
  Build$:          flag(everything) || flag(bap_std)
  Path:           tools
  MainIs:         bapbundle.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   core_kernel, bap.bundle, fileutils

Executable "postinstall"
  Build$:          flag(everything) || flag(bap_std)
  Path:           tools
  MainIs:         postinstall.ml
  Install:        false
  CompiledObject: best
  BuildDepends:   bap.config, fileutils

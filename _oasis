OASISFormat: 0.4
Name:        bap
Version:     0.9
Synopsis:    BAP Core Library
Authors:     BAP Team
Maintainers: Ivan Gotovchits <ivg@ieee.org>
License:     MIT
Copyrights:  (C) 2014 Carnegie Mellon University
Plugins:     META (0.4)
AlphaFeatures: ocamlbuild_more_args
BuildTools: ocamlbuild, camlp4o
XOCamlbuildExtraArgs: -j 2
BuildDepends:
              bin_prot.syntax,
              camlp4,
              comparelib.syntax,
              core_kernel,
              enumerate.syntax,
              faillib.syntax,
              fieldslib.syntax,
              herelib.syntax,
              pa_ounit.syntax,
              sexplib.syntax,
              variantslib.syntax

# for some reason oasis doesn't provide us a $cp command
PreConfCommand: $rm setup.data
PostInstallCommand: cp baptop bapbuild $bindir
PostUninstallCommand: $rm $bindir/baptop $bindir/bapbuild
PostDistcleanCommand: $rm  _tags myocamlbuild.ml setup.ml setup.data

Document bap
  Type: ocamlbuild (0.4)
  BuildTools: ocamlbuild, ocamldoc
  Title:      API documentation for bap
  XOCamlbuildPath: lib/bap/
  XOCamlbuildExtraArgs:
    "-docflags '-colorize-code -short-functors -charset utf-8'"
  XOCamlbuildLibraries: bap

Flag serialization
  Description: Build serialization library
  Default: false

Flag llvm_static
  Description: Links with llvm in a static mode
  Default: true

Flag benchmarks
  Description: Build and run benchmarks
  Default: false

Flag disassemblers
  Description: Build C++ interface to dissassemblers backend
  Default: true

Flag server
  Description: Build BAP server
  Default: true

Flag llvm
 Description: Build with llvm backend
 Default: true

Flag server
 Description: Build BAP server
 Default: true

Library bap
  Path:            lib/bap
  FindLibName:     bap
  CompiledObject:  best
  BuildDepends:    bap.disasm,
                   bap.dwarf,
                   bap.elf,
                   bap.image,
                   bap.types,
                   dynlink,
                   findlib
  Modules:         Bap,
                   Bap_plugin,
                   Bap_plugins

Library top
  XMETADescription:
     Toplevel printers for bap-types and core-kernel
  Path: lib/bap
  FindLibParent: bap
  FindLibName: top
  Modules:
            Bap_install_printers,
            Bap_load_plugins,
            Bap_toplevel

  BuildDepends: compiler-libs, bap

Library types
  Path:            lib/bap_types
  FindlibParent:   bap
  FindlibName:     types
  CompiledObject:  best
  BuildDepends:    zarith
  Modules:         Bap_types,
                   Bap_addr,
                   Bap_arch,
                   Bap_bil,
                   Bap_bitvector,
                   Bap_common,
                   Bap_exp,
                   Bap_int_conversions,
                   Bap_integer,
                   Bap_integer_intf,
                   Bap_regular,
                   Bap_seq,
                   Bap_size,
                   Bap_stmt,
                   Bap_type,
                   Bap_var

Library conceval
  Path: lib/bap_types
  FindLibParent: types
  FindLibName: conceval
  BuildTools: ocamlbuild
  Modules: Conceval
  BuildDepends: bap.types
  CompiledObject: best

Library serialization
  XMETADescription: Provides serialization for main data types
  Path:         lib/bap_types/
  Build$: flag(serialization)
  FindLibParent: types
  FindLibName: serialization
  BuildTools: ocamlbuild, piqi
  DataFiles:    *.piqi
  CompiledObject: best
  BuildDepends: piqirun, bap.types
  Modules:   Bil_piqi,
             Stmt_piqi,
             Stmt_piqi_ext

Library bap_image
  Path:          lib/bap_image/
  FindlibParent: bap
  FindlibName:   image
  BuildDepends:  bap.elf,
                 bap.dwarf,
                 bap.types
  Modules:       Bap_image,
                 Bap_memory,
                 Bap_table,
                 Image_backend,
                 Image_common,
                 Image_internal_std

Library elf_backend
  Path:            lib/bap_image/
  FindlibParent:   bap_image
  FindlibName:     elf_backend
  XMETAExtraLines: plugin_system = "bap.image"
  CompiledObject:  best
  BuildDepends:    bap, core_kernel
  Modules:         Image_elf

Library elf
  Path:          lib/bap_elf
  FindlibParent: bap
  FindlibName:   elf
  BuildDepends:  bitstring, bitstring.syntax
  Modules:       Bap_elf,
                 Elf_parse,
                 Elf_types,
                 Elf_utils
  InternalModules: Elf_internal_utils

Library dwarf
  Path:          lib/bap_dwarf
  FindlibParent: bap
  FindlibName:   dwarf
  BuildDepends:  bap.types
  Modules:       Bap_dwarf,
                 Dwarf_data,
                 Dwarf_fbi,
                 Dwarf_input,
                 Dwarf_leb128,
                 Dwarf_types

Library disasm
  Path:          lib/bap_disasm
  Build$:        flag(disassemblers)
  FindlibParent: bap
  FindlibName:   disasm
  BuildDepends:  bap.image,
                 bap.types
  Modules:       Bap_disasm,
                 Bap_disasm_arm,
                 Bap_disasm_arm_bit,
                 Bap_disasm_arm_branch,
                 Bap_disasm_arm_env,
                 Bap_disasm_arm_flags,
                 Bap_disasm_arm_lifter,
                 Bap_disasm_arm_mem,
                 Bap_disasm_arm_mem_shift,
                 Bap_disasm_arm_mov,
                 Bap_disasm_arm_mul,
                 Bap_disasm_arm_shift,
                 Bap_disasm_arm_types,
                 Bap_disasm_arm_utils,
                 Bap_disasm_basic,
                 Bap_disasm_prim,
                 Bap_insn_kind

  CCOpt:         $cc_optimization
  CCLib:         $cxxlibs
  CSources:      disasm.h, disasm.c, disasm_stubs.c

Library llvm
  Path:          lib/bap_disasm
  Build$:        flag(disassemblers) && flag(llvm)
  FindlibParent: bap
  FindlibName:   llvm
  BuildDepends:  bap.image,
                 bap.disasm,
                 bap.types
  Modules:       Bap_llvm
  CCOpt:         $cc_optimization
  CCLib:         $llvm_lib $cxxlibs $llvm_ldflags
  CSources:      llvm_disasm.h, llvm_disasm.c, llvm_stubs.c
  XMETAExtraLines: plugin_system = "bap.disasm"


Library types_test
  Path:           lib_test/bap_types
  Build$:         flag(tests)
  Install:        false
  CompiledObject: best
  BuildDepends:   bap.types, bap.types.conceval
  Modules:        Test_bitvector,
                  Test_conceval

Library image_test
  Path:           lib_test/bap_image
  Build$:         flag(tests)
  CompiledObject: best
  BuildDepends:   bap
  Install:        false
  Modules:        Test_image,
                  Test_table

Library benchmarks
  Path:           benchmarks
  Build$:         flag(tests) && flag(benchmarks)
  CompiledObject: best
  BuildDepends:   bap, core, core_bench, threads
  Install:        false
  Modules:        Bench_image


Library dwarf_test
  Path:           lib_test/bap_dwarf
  Build$:         flag(tests)
  CompiledObject: best
  BuildDepends:   bap.dwarf
  Install:        false
  Modules:        Test_leb128

Library disasm_test
  Path:           lib_test/bap_disasm
  Build$:         flag(tests) && flag(disassemblers)
  CompiledObject: best
  BuildDepends:   bap
  Install:        false
  Modules:        Test_disasm

Library core_lwt
  Path:           lwt
  Build$:         flag(server)
  CompiledObject: best
  BuildDepends:   lwt, lwt.unix, lwt.log
  Modules:        Core_lwt,
                  Core_lwt_basic,
                  Core_lwt_container,
                  Core_lwt_container_intf,
                  Core_lwt_extra,
                  Core_lwt_or_error,
                  Core_lwt_pool,
                  Core_lwt_stream


Executable "bap-server"
  Path:           src/server
  Build$:         flag(server)
  CompiledObject: best
  BuildDepends:   bap, lwt-zmq, ezjsonm, uri, cohttp.lwt, core_lwt
  Install:        true
  MainIs:         start_server.ml

Executable readbin
  Path:           src/readbin
  MainIs:         readbin.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   bap, bap.disasm

Executable "bap-mc"
  Path:           src/bap_mc
  MainIs:         bap_mc.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   bap, bap.disasm, cmdliner

Executable byteweight
  Path:           src/byteweight
  MainIs:         byteweight.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   bap

Executable train
  Path:           src/byteweight
  MainIs:         train.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   bap

Executable fbi
  Path:           src/fbi
  MainIs:         fbi.ml
  Install:        true
  CompiledObject: best
  BuildDepends:   bap

Executable run_tests
  Path:         lib_test/bap
  MainIs:       run_tests.ml
  Install:      false
  Build$:       flag(tests)
  BuildDepends:
                disasm_test,
                dwarf_test,
                image_test,
                oUnit,
                types_test
  CompiledObject: best

Executable run_benchmarks
  Path:         benchmarks
  MainIs:       run_benchmarks.ml
  Install:      false
  Build$:       flag(tests) && flag(benchmarks)
  BuildDepends: bap, benchmarks
  CompiledObject: native

Test unit_tests
  TestTools: run_tests
  Command: $run_tests

Test inline_tests
  TestTools: run_tests
  Command: $run_tests inline-test-runner dummy -show-counts

Test benchmarks
  TestTools: run_benchmarks
  Run$:         flag(tests) && flag(benchmarks)
  Command: $run_benchmarks
